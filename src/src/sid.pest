//! A grammar for sid.

WHITESPACE = _{ " " | "\t" | NEWLINE }

/// An arbitrary expression.
expr = { op_pre* ~ atom ~ op_suf* ~ (op_bin ~ op_pre* ~ atom ~ op_suf*)* }

/// An atomic expression.
atom = _{ expr_int | expr_arr | expr_ind | "(" ~ expr ~ ")" }
  /// An integer literal expression.
  expr_int = @{ ASCII_DIGIT+ }
  /// An array construction expression.
  expr_arr = @{ "{" ~ (expr ~ ",")* ~ "}" }
  /// An array index expression.
  expr_ind = @{ "@" ~ expr_int }

/// A prefix operator.
op_pre   = _{ op_neg | op_not }
  /// A negation operator.
  op_neg = { "-" }
  /// A logical NOT operator.
  op_not = { "~" }

/// A suffix (postfix) operator.
op_suf   = _{ op_map }
  /// An array mapping operator.
  op_map = { "[" ~ "]" }

/// A binary (infix) operator.
op_bin   = _{ op_add | op_sub | op_mul | op_div | op_rem
            | op_and | op_ior | op_xor | op_shl | op_shr
            | op_cat | op_exp | op_red | op_mvl | op_mvr
            | op_iseq | op_isne | op_then | op_else
            | op_isle | op_islt | op_isge | op_isgt
            }
  /// Addition.
  op_add = { "+" }
  /// Subtraction.
  op_sub = { "-" }
  /// Multiplication.
  op_mul = { "*" }
  /// Division.
  op_div = { "/" }
  /// Remainder.
  op_rem = { "%" }
  /// Binary AND.
  op_and = { "&" }
  /// Binary inclusive OR.
  op_ior = { "|" }
  /// Binary exclusive OR.
  op_xor = { "^" }
  /// Binary left-shift.
  op_shl = { "<<" }
  /// Binary right-shift.
  op_shr = { ">>" }
  /// Array concatenation.
  op_cat = { "~" }
  /// Masking array expansion.
  op_exp = { "<?" }
  /// Masking array reduction.
  op_red = { ">?" }
  /// Array element left-shift.
  op_mvl = { "<|" }
  /// Array element right-shift.
  op_mvr = { "|>" }
  /// Compare for equality.
  op_iseq = { "==" }
  /// Compare for inequality.
  op_isne = { "!=" }
  /// Mask.
  op_then = { "?" }
  /// Unmask with default.
  op_else = { ":" }
  /// Compare for less-than or equal-to.
  op_isle = { "<=" }
  /// Compare for less-than.
  op_islt = { "<" }
  /// Compare for greater-than or equal-to.
  op_isge = { ">=" }
  /// Compare for greater-than.
  op_isgt = { ">" }

//! A grammar for Solo.

WHITESPACE = _{ " " | "\t" | NEWLINE }

/// A module.
mod = { SOI ~ fn* ~ EOI }

/// A function.
fn = { fn_kw ~ name
     ~ "(" ~ (fn_arg ~ ",")* ~ fn_arg? ~ ")"
     ~ "->" ~ type
     ~ expr_blk }
  fn_kw = @{ "fn" ~ !(ASCII_ALPHANUMERIC | "_") }
  fn_arg = { name ~ ":" ~ type }

/// A type.
type = { type_stream? ~ type_vector? ~ type_option? ~ type_scalar }
  /// A type stream wrapper.
  type_stream = { "[]" }
  /// A type vector wrapper.
  type_vector = { "<" ~ type_vector_size ~ ">" }
    /// The size of a vector type.
    type_vector_size = @{ ASCII_DIGIT+ }
  /// A type option wrapper.
  type_option = { "?" }
  /// A scalar type.
  type_scalar = { type_int }
    /// An integer scalar type.
    type_int = @{ ("u" | "s") ~ ASCII_DIGIT+ }

/// A statement.
stmt = { stmt_let }
  /// A let statement.
  stmt_let = { name ~ ":=" ~ expr }

/// An arbitrary expression.
expr = { expr_unit ~ (op_bin ~ expr_unit)* }
  /// An indivisible expression.
  expr_unit = { op_pre* ~ expr_sufs }
  /// An indivisible expression without prefixes.
  expr_sufs = { atom ~ op_suf* }

/// An atomic expression.
atom = { expr_int | expr_vec | expr_cst | expr_var | expr_blk | "(" ~ expr ~ ")" }
  /// An integer literal expression.
  expr_int = @{ ASCII_DIGIT+ }
  /// A vector literal expression.
  expr_vec = { "<" ~ (expr ~ ",")* ~ expr? ~ ">" }
  /// A cast expression.
  expr_cst = { "(" ~ type ~ ")" ~ expr_unit }
  /// A variable reference expression.
  expr_var = { name }
  /// A block expression.
  expr_blk = { "{" ~ (stmt ~ ";")* ~ expr ~ "}" }

/// A prefix operator.
op_pre   = { op_neg | op_not }
  /// An integer negation operator.
  op_neg = { "-" }
  /// A logical NOT operator.
  op_not = { "~" }

/// A suffix (postfix) operator.
op_suf   = { !ANY ~ ANY }

/// A binary (infix) operator.
op_bin   = { op_add | op_sub | op_mul | op_div | op_rem
           | op_and | op_ior | op_xor | op_shl | op_shr
	   | op_cat | op_ind | op_exp | op_red
           | op_iseq | op_isne | op_isle | op_islt | op_isge | op_isgt
	   | op_cond | op_else
           }
  /// Addition.
  op_add = { "+" }
  /// Subtraction.
  op_sub = { "-" }
  /// Multiplication.
  op_mul = { "*" }
  /// Division.
  op_div = { "/" }
  /// Remainder.
  op_rem = { "%" }

  /// Binary AND.
  op_and = { "&" }
  /// Binary inclusive OR.
  op_ior = { "|" }
  /// Binary exclusive OR.
  op_xor = { "^" }
  /// Binary left-shift.
  op_shl = { "<<" }
  /// Binary right-shift.
  op_shr = { ">>" }

  /// Concatenate.
  op_cat = { "~" }
  /// Index.
  op_ind = { "@" }
  /// Expand to a mask.
  op_exp = { "<?" }
  /// Reduce by a mask.
  op_red = { ">?" }

  /// Compare for equality.
  op_iseq = { "==" }
  /// Compare for inequality.
  op_isne = { "!=" }
  /// Compare for less-than or equal-to.
  op_isle = { "<=" }
  /// Compare for less-than.
  op_islt = { "<" }
  /// Compare for greater-than or equal-to.
  op_isge = { ">=" }
  /// Compare for greater-than.
  op_isgt = { ">" }

  /// Condition.
  op_cond = { "?" }
  /// Default.
  op_else = { ":" }

/// A name.
name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
